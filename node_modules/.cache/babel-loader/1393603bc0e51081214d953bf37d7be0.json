{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateOrg/CreateOrg.js\",\n    _s = $RefreshSig$();\n\nimport * as actions from '../../../Store/Actions/Index';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data';\nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateOrg.css';\n\nconst CreateOrgs = props => {\n  _s();\n\n  const [createOrgForm, SetcreateOrgForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Organization Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: false\n      },\n      valid: false,\n      touched: false\n    },\n    Owner: {\n      elementType: 'select',\n      elementConfig: {\n        className: 'formcontrol'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: false\n      },\n      valid: false,\n      touched: false\n    },\n    Users: {\n      elementType: 'select',\n      elementConfig: {\n        className: 'formcontrol'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: false\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n    props.onFetchAllUsers(token);\n  }, []);\n\n  let sidebar = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 19\n  }, this);\n\n  let navbar = /*#__PURE__*/_jsxDEV(Navbar, {\n    name: localStorage.getItem('name')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 19\n  }, this);\n\n  let count = 0; //let rolesElement=  <Sidebar/>;\n\n  /*\n  if(!props.loading){\n       rolesElement= props.AllRoles.map(event =>(\n      <div class=\"reposition\">\n      <button name=\"componentButton\" value={event}>\n      <OneRole \n          name={event.name}\n          permission={event.permissions}\n          roleId = {event.id}\n            />\n            {console.log(event.permissions)}\n      </button>\n      </div>\n         ))\n  }*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [navbar, sidebar, /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"fund-pics row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateOrgs, \"ABi3zr/xwPmE0FPy3+3C6F3HaP4=\");\n\n_c = CreateOrgs;\n\nconst mapAllOrganizationsDispatchToProps = dispatch => {\n  return {\n    onFetchAllUsers: token => dispatch(actions.fetchAllUsers(token)) //onFetchOneEvents:(OrganizationId)=>dispatch(actions.fetchOneOrganizations(fundId))\n\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page vwrole', state);\n  return {\n    AllRoles: state.AllRoles.AllRoles,\n    loading: state.organizations.loading,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateOrgs);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateOrgs\");","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateOrg/CreateOrg.js"],"names":["actions","Redirect","Input","Navbar","Sidebar","React","Component","useState","useEffect","connect","FormData","OneRole","classes","CreateOrgs","props","createOrgForm","SetcreateOrgForm","name","elementType","elementConfig","className","type","placeholder","value","validation","required","valid","touched","email","isEmail","Owner","Users","token","localStorage","getItem","onFetchAllUsers","sidebar","navbar","count","mapAllOrganizationsDispatchToProps","dispatch","fetchAllUsers","mapStatetoProps","state","console","log","AllRoles","loading","organizations","auth"],"mappings":"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","sourcesContent":["import * as actions from '../../../Store/Actions/Index'; \nimport {Redirect} from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data'; \nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateOrg.css';\nconst CreateOrgs = props =>{\n   const [createOrgForm,SetcreateOrgForm]= useState({\n    name: {\n        elementType: 'input',\n        elementConfig: {\n            className:'formcontrol',\n            type: 'text',\n            placeholder: 'Organization Name'\n        },\n        value: '',\n        validation: {\n            required: true,\n        },\n        valid: false,\n        touched: false\n    },\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            className:'formcontrol',\n            type: 'text',\n            placeholder: 'Username'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: false\n        },\n        valid: false,\n        touched: false\n    },\n    Owner: {\n        elementType: 'select',\n        elementConfig: {\n            className:'formcontrol'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: false\n        },\n        valid: false,\n        touched: false\n    },\n    Users: {\n        elementType: 'select',\n        elementConfig: {\n            className:'formcontrol'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: false\n        },\n        valid: false,\n        touched: false\n    },\n   })\n    useEffect (()=>{\n        let token = localStorage.getItem('token')\n        props.onFetchAllUsers(token);\n    },[]);\n\n    let sidebar = <Sidebar/>;\n    let navbar =  <Navbar name ={localStorage.getItem('name')}/>;\n    let count = 0;\n    //let rolesElement=  <Sidebar/>;\n    /*\n    if(!props.loading){\n\n        rolesElement= props.AllRoles.map(event =>(\n        <div class=\"reposition\">\n        <button name=\"componentButton\" value={event}>\n        <OneRole \n            name={event.name}\n            permission={event.permissions}\n            roleId = {event.id}\n              />\n              {console.log(event.permissions)}\n        </button>\n        </div>\n           ))\n    }*/\n    return(\n        <div>\n            {navbar}\n            {sidebar}\n            <div class=\"fund-pics row\">\n          \n            </div>\n    </div>)\n\n    }\n    \n    \n\nconst mapAllOrganizationsDispatchToProps =dispatch => {\n  \n    return{\n        onFetchAllUsers:(token) =>dispatch(actions.fetchAllUsers(token)),\n        //onFetchOneEvents:(OrganizationId)=>dispatch(actions.fetchOneOrganizations(fundId))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page vwrole',state)\n    return {\n    AllRoles: state.AllRoles.AllRoles,\n    loading:state.organizations.loading,\n    token:state.auth.token\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateOrgs);\n"]},"metadata":{},"sourceType":"module"}