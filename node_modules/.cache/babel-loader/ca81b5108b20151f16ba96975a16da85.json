{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateRole/CreateRole.js\",\n    _s = $RefreshSig$();\n\nimport * as actions from '../../../Store/Actions/Index';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data';\nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateRole.css';\n\nconst CreateRole = props => {\n  _s();\n\n  //USE EFFECT COMPONENTS\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n    props.onFetchOrganizations(token);\n    props.onFetchAllPermissions(token);\n  }, []); //USE STATE COMPONENTS\n\n  const [isPermLod, SetIsPermLod] = useState(true);\n  const [createOrgForm, SetcreateOrgForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Role Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    organization: {\n      label: 'Organization',\n      elementType: 'dropdown',\n      elementConfig: {\n        className: 'formcontrol'\n      },\n      options: '',\n      value: 0,\n      valid: false,\n      touched: false\n    },\n    permisson_loaded: {\n      label: 'Permission Loaded',\n      elementType: 'check-box',\n      value: isPermLod\n    }\n  });\n  const [permissionForm, setPermissionForm] = useState({\n    permissions: {\n      label: 'Permissions',\n      elementType: 'select-multiple',\n      elementConfig: {\n        className: 'formcontrol',\n        options: []\n      },\n      options: '',\n      value: [],\n      valid: false,\n      touched: false\n    }\n  }); //VALIDITY CHECK\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  };\n\n  if (!props.loading) {\n    console.log(\"props.loading\", props.loading);\n    const formElementsArray = []; //array for input elements\n\n    for (let key in createOrgForm) {\n      // render input elements from array\n      formElementsArray.push({\n        id: key,\n        config: createOrgForm[key]\n      });\n    }\n\n    console.log(\"formElementsArray\", formElementsArray);\n    form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      label: formElement.config.label,\n      className: formElement.config.className,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      options: props.All,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this));\n  } //UI COMPONENTS\n\n\n  let sidebar = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 19\n  }, this);\n\n  let navbar = /*#__PURE__*/_jsxDEV(Navbar, {\n    name: localStorage.getItem('name')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 19\n  }, this);\n\n  let count = 0;\n\n  let form = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 16\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [navbar, sidebar, /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"CrtOrgForm\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateRole, \"Sw5qj+FxfFkBPdVUg9cn/J3x1rw=\");\n\n_c = CreateRole;\n\nconst mapAllOrganizationsDispatchToProps = dispatch => {\n  return {\n    onFetchOrganizations: token => dispatch(actions.fetchOrganizations(token)),\n    onFetchAllPermissions: token => dispatch(actions.fetchAllPermissions(token)) //onCreateOrg:(name,email,owner,users,permissions_loaded,token)=>dispatch(actions.createOrg(name,email,owner,users,permissions_loaded,token))\n\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page crtrole', state);\n  return {\n    AllPermissions: state.AllPermissions.AllPermissions,\n    loading: state.AllPermissions.loading,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateRole);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRole\");","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateRole/CreateRole.js"],"names":["actions","Redirect","Input","Navbar","Sidebar","React","Component","useState","useEffect","connect","FormData","OneRole","classes","CreateRole","props","token","localStorage","getItem","onFetchOrganizations","onFetchAllPermissions","isPermLod","SetIsPermLod","createOrgForm","SetcreateOrgForm","name","elementType","elementConfig","className","type","placeholder","value","validation","required","valid","touched","organization","label","options","permisson_loaded","permissionForm","setPermissionForm","permissions","checkValidity","rules","isValid","trim","minLength","length","maxLength","isEmail","pattern","test","isNumeric","loading","console","log","formElementsArray","key","push","id","config","form","map","formElement","All","event","inputChangedHandler","sidebar","navbar","count","mapAllOrganizationsDispatchToProps","dispatch","fetchOrganizations","fetchAllPermissions","mapStatetoProps","state","AllPermissions","auth"],"mappings":";;;;;AAAA,OAAO,KAAKA,OAAZ,MAAyB,8BAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,qCAApB;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AACA,MAAMC,UAAU,GAAGC,KAAK,IAAG;AAAA;;AACvB;AACAN,EAAAA,SAAS,CAAE,MAAI;AACX,QAAIO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACAH,IAAAA,KAAK,CAACI,oBAAN,CAA2BH,KAA3B;AACAD,IAAAA,KAAK,CAACK,qBAAN,CAA4BJ,KAA5B;AACH,GAJQ,EAIP,EAJO,CAAT,CAFuB,CAQvB;;AAGA,QAAM,CAACK,SAAD,EAAWC,YAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACe,aAAD,EAAeC,gBAAf,IAAkChB,QAAQ,CAAC;AAC7CiB,IAAAA,IAAI,EAAE;AACFC,MAAAA,WAAW,EAAE,OADX;AAEFC,MAAAA,aAAa,EAAE;AACXC,QAAAA,SAAS,EAAC,aADC;AAEXC,QAAAA,IAAI,EAAE,MAFK;AAGXC,QAAAA,WAAW,EAAE;AAHF,OAFb;AAOFC,MAAAA,KAAK,EAAE,EAPL;AAQFC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE;AADF,OARV;AAWFC,MAAAA,KAAK,EAAE,KAXL;AAYFC,MAAAA,OAAO,EAAE;AAZP,KADuC;AAe7CC,IAAAA,YAAY,EAAE;AACVC,MAAAA,KAAK,EAAC,cADI;AAEVX,MAAAA,WAAW,EAAE,UAFH;AAGVC,MAAAA,aAAa,EAAE;AACXC,QAAAA,SAAS,EAAC;AADC,OAHL;AAOVU,MAAAA,OAAO,EAAC,EAPE;AAQVP,MAAAA,KAAK,EAAE,CARG;AASVG,MAAAA,KAAK,EAAE,KATG;AAUVC,MAAAA,OAAO,EAAE;AAVC,KAf+B;AA2B7CI,IAAAA,gBAAgB,EAAC;AACbF,MAAAA,KAAK,EAAE,mBADM;AAEbX,MAAAA,WAAW,EAAE,WAFA;AAGbK,MAAAA,KAAK,EAAEV;AAHM;AA3B4B,GAAD,CAAhD;AAiCA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAqCjC,QAAQ,CAAC;AAChDkC,IAAAA,WAAW,EAAE;AACTL,MAAAA,KAAK,EAAC,aADG;AAETX,MAAAA,WAAW,EAAE,iBAFJ;AAGTC,MAAAA,aAAa,EAAE;AACXC,QAAAA,SAAS,EAAC,aADC;AAEXU,QAAAA,OAAO,EAAC;AAFG,OAHN;AAOTA,MAAAA,OAAO,EAAC,EAPC;AAQTP,MAAAA,KAAK,EAAE,EARE;AASTG,MAAAA,KAAK,EAAE,KATE;AAUTC,MAAAA,OAAO,EAAE;AAVA;AADmC,GAAD,CAAnD,CA7CuB,CA6DvB;;AACA,QAAMQ,aAAa,GAAC,CAACZ,KAAD,EAAQa,KAAR,KAAiB;AACjC,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACR,aAAO,IAAP;AACH;;AAED,QAAIA,KAAK,CAACX,QAAV,EAAoB;AAChBY,MAAAA,OAAO,GAAGd,KAAK,CAACe,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACG,SAAV,EAAqB;AACjBF,MAAAA,OAAO,GAAGd,KAAK,CAACiB,MAAN,IAAgBJ,KAAK,CAACG,SAAtB,IAAmCF,OAA7C;AACH;;AAED,QAAID,KAAK,CAACK,SAAV,EAAqB;AACjBJ,MAAAA,OAAO,GAAGd,KAAK,CAACiB,MAAN,IAAgBJ,KAAK,CAACK,SAAtB,IAAmCJ,OAA7C;AACH;;AAED,QAAID,KAAK,CAACM,OAAV,EAAmB;AACf,YAAMC,OAAO,GAAG,uIAAhB;AACAN,MAAAA,OAAO,GAAGM,OAAO,CAACC,IAAR,CAAarB,KAAb,KAAuBc,OAAjC;AACH;;AAED,QAAID,KAAK,CAACS,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAN,MAAAA,OAAO,GAAGM,OAAO,CAACC,IAAR,CAAarB,KAAb,KAAuBc,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH,GA7BD;;AAgCA,MAAG,CAAC9B,KAAK,CAACuC,OAAV,EAAkB;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BzC,KAAK,CAACuC,OAAlC;AACJ,UAAMG,iBAAiB,GAAG,EAA1B,CAFkB,CAEY;;AAC1B,SAAM,IAAIC,GAAV,IAAiBnC,aAAjB,EAAiC;AAAG;AAChCkC,MAAAA,iBAAiB,CAACE,IAAlB,CAAwB;AACpBC,QAAAA,EAAE,EAAEF,GADgB;AAEpBG,QAAAA,MAAM,EAAEtC,aAAa,CAACmC,GAAD;AAFD,OAAxB;AAIH;;AACLH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCC,iBAAhC;AACIK,IAAAA,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAW,iBACrC,QAAC,KAAD;AACI,MAAA,KAAK,EAAEA,WAAW,CAACH,MAAZ,CAAmBxB,KAD9B;AAGI,MAAA,SAAS,EAAE2B,WAAW,CAACH,MAAZ,CAAmBjC,SAHlC;AAII,MAAA,WAAW,EAAEoC,WAAW,CAACH,MAAZ,CAAmBnC,WAJpC;AAKI,MAAA,aAAa,EAAEsC,WAAW,CAACH,MAAZ,CAAmBlC,aALtC;AAMI,MAAA,KAAK,EAAEqC,WAAW,CAACH,MAAZ,CAAmB9B,KAN9B;AAOI,MAAA,OAAO,EAAIhB,KAAK,CAACkD,GAPrB;AAQI,MAAA,OAAO,EAAE,CAACD,WAAW,CAACH,MAAZ,CAAmB3B,KARjC;AASI,MAAA,cAAc,EAAE8B,WAAW,CAACH,MAAZ,CAAmB7B,UATvC;AAUI,MAAA,OAAO,EAAEgC,WAAW,CAACH,MAAZ,CAAmB1B,OAVhC;AAWI,MAAA,OAAO,EAAI+B,KAAF,IAAaC,mBAAmB,CAAED,KAAF,EAASF,WAAW,CAACJ,EAArB;AAX7C,OAESI,WAAW,CAACJ,EAFrB;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AAcC,GAtHkB,CAyHvB;;;AACA,MAAIQ,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAd;;AACA,MAAIC,MAAM,gBAAI,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAGpD,YAAY,CAACC,OAAb,CAAqB,MAArB;AAAf;AAAA;AAAA;AAAA;AAAA,UAAd;;AACA,MAAIoD,KAAK,GAAG,CAAZ;;AACA,MAAIR,IAAI,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAX;;AAEA,sBACI;AAAA,eACKO,MADL,EAEKD,OAFL,eAGI;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASC,CAxIL;;GAAMtD,U;;KAAAA,U;;AA4IN,MAAMyD,kCAAkC,GAAEC,QAAQ,IAAI;AAElD,SAAM;AACFrD,IAAAA,oBAAoB,EAAEH,KAAD,IAAUwD,QAAQ,CAACvE,OAAO,CAACwE,kBAAR,CAA2BzD,KAA3B,CAAD,CADrC;AAEFI,IAAAA,qBAAqB,EAAEJ,KAAD,IAAUwD,QAAQ,CAACvE,OAAO,CAACyE,mBAAR,CAA4B1D,KAA5B,CAAD,CAFtC,CAGF;;AAHE,GAAN;AAKH,CAPD,C,CAUA;;;AACA,MAAM2D,eAAe,GAAGC,KAAK,IAAG;AAC5BrB,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgCoB,KAAhC;AACA,SAAO;AACPC,IAAAA,cAAc,EAAED,KAAK,CAACC,cAAN,CAAqBA,cAD9B;AAEPvB,IAAAA,OAAO,EAACsB,KAAK,CAACC,cAAN,CAAqBvB,OAFtB;AAGPtC,IAAAA,KAAK,EAAC4D,KAAK,CAACE,IAAN,CAAW9D;AAHV,GAAP;AAKH,CAPD;;AAUA,eAAeN,OAAO,CAACiE,eAAD,EAAkBJ,kCAAlB,CAAP,CAA6DzD,UAA7D,CAAf","sourcesContent":["import * as actions from '../../../Store/Actions/Index'; \nimport {Redirect} from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data'; \nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateRole.css';\nconst CreateRole = props =>{\n    //USE EFFECT COMPONENTS\n    useEffect (()=>{\n        let token = localStorage.getItem('token')\n        props.onFetchOrganizations(token);\n        props.onFetchAllPermissions(token);\n    },[]);\n\n    //USE STATE COMPONENTS\n\n\n    const [isPermLod,SetIsPermLod]= useState(true);\n    const [createOrgForm,SetcreateOrgForm]= useState({\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                className:'formcontrol',\n                type: 'text',\n                placeholder: 'Role Name'\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false\n        },\n        organization: {\n            label:'Organization',\n            elementType: 'dropdown',\n            elementConfig: {\n                className:'formcontrol',\n                \n            },\n            options:'',\n            value: 0,\n            valid: false,\n            touched: false\n        },\n        permisson_loaded:{\n            label: 'Permission Loaded',\n            elementType: 'check-box',\n            value: isPermLod\n        }\n       })\n    const [permissionForm, setPermissionForm]= useState({\n        permissions: {\n            label:'Permissions',\n            elementType: 'select-multiple',\n            elementConfig: {\n                className:'formcontrol',\n                options:[]\n            },\n            options:'',\n            value: [],\n            valid: false,\n            touched: false\n        },\n    })\n\n\n    //VALIDITY CHECK\n    const checkValidity=(value, rules) =>{\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n\n    if(!props.loading){\n        console.log(\"props.loading\",props.loading)\n    const formElementsArray = []; //array for input elements\n        for ( let key in createOrgForm ) {  // render input elements from array\n            formElementsArray.push( {\n                id: key,\n                config: createOrgForm[key]\n            });\n        }\n    console.log(\"formElementsArray\",formElementsArray)\n        form = formElementsArray.map( formElement => (\n            <Input\n                label={formElement.config.label}\n                key={formElement.id}\n                className={formElement.config.className}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                options = {props.All}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n        }\n    \n\n    //UI COMPONENTS\n    let sidebar = <Sidebar/>;\n    let navbar =  <Navbar name ={localStorage.getItem('name')}/>;\n    let count = 0;\n    let form=  <Sidebar/>;\n    \n    return(\n        <div>\n            {navbar}\n            {sidebar}\n            <form className=\"CrtOrgForm\" >\n                <button >SUBMIT</button>\n            </form>\n    </div>)\n\n    }\n    \n    \n\nconst mapAllOrganizationsDispatchToProps =dispatch => {\n  \n    return{\n        onFetchOrganizations:(token) =>dispatch(actions.fetchOrganizations(token)),\n        onFetchAllPermissions:(token) =>dispatch(actions.fetchAllPermissions(token)),\n        //onCreateOrg:(name,email,owner,users,permissions_loaded,token)=>dispatch(actions.createOrg(name,email,owner,users,permissions_loaded,token))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page crtrole',state)\n    return {\n    AllPermissions: state.AllPermissions.AllPermissions,\n    loading:state.AllPermissions.loading,\n    token:state.auth.token\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateRole);\n"]},"metadata":{},"sourceType":"module"}