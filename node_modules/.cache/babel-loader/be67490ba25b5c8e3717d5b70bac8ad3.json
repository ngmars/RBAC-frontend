{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateRole/CreateRole.js\",\n    _s = $RefreshSig$();\n\nimport * as actions from '../../../Store/Actions/Index';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data';\nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateRole.css';\n\nconst CreateRole = props => {\n  _s();\n\n  let newUserArr = []; //USE EFFECT COMPONENTS\n\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n    props.onFetchOrganizations(token);\n    props.onFetchAllPermissions(token);\n  }, []); //USE STATE COMPONENTS\n\n  const [selectedPermissionsArr, setSelectedPermissionsArr] = useState([]);\n  const [isPermLod, SetIsPermLod] = useState(true);\n  const [createRoleForm, SetCreateRoleForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Role Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    organization: {\n      label: 'Organization',\n      elementType: 'dropdown2',\n      elementConfig: {\n        className: 'formcontrol'\n      },\n      options: '',\n      value: 0,\n      valid: false,\n      touched: false\n    },\n    permisson_loaded: {\n      label: 'Permission Loaded',\n      elementType: 'check-box',\n      value: isPermLod\n    }\n  });\n  const [permissionForm, setPermissionForm] = useState({\n    permissions: {\n      label: 'Permissions',\n      elementType: 'select-multiple2',\n      elementConfig: {\n        className: 'formcontrol',\n        options: []\n      },\n      options: '',\n      value: [],\n      valid: false,\n      touched: false\n    }\n  }); //VALIDITY HANDLER\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }; //INPUT HANDLER\n\n\n  const inputChangedHandler = (event, controlName) => {\n    console.log('Change Handler', controlName);\n\n    if (controlName == \"permisson_loaded\") {\n      console.log('ENtere permlod');\n      SetIsPermLod(!isPermLod);\n      const updatedControls = { ...createRoleForm,\n        [controlName]: { ...createRoleForm[controlName],\n          value: isPermLod\n        }\n      };\n      SetCreateRoleForm(updatedControls);\n    } else if (controlName == \"permissions\") {\n      console.log('User');\n\n      if (!selectedPermissionsArr.includes(parseInt(event.target.value))) {\n        console.log(\"This is the includes array\", selectedPermissionsArr.includes(parseInt(event.target.value)));\n        setSelectedPermissionsArr([...selectedPermissionsArr, parseInt(event.target.value) + 1]);\n        console.log('full User array', selectedPermissionsArr);\n        newUserArr.push(...selectedPermissionsArr);\n        newUserArr.push(parseInt(event.target.value) + 1);\n        console.log('newUSerArr', newUserArr);\n        const updatedControls = { ...createRoleForm,\n          [controlName]: { ...createRoleForm[controlName],\n            value: newUserArr,\n            valid: true,\n            touched: true\n          }\n        };\n        SetCreateRoleForm(updatedControls);\n      }\n    } else if (controlName == \"organization\") {\n      const updatedControls = { ...createRoleForm,\n        [controlName]: { ...createRoleForm[controlName],\n          value: parseInt(event.target.value) + 1,\n          valid: checkValidity(event.target.value, createRoleForm[controlName].validation),\n          touched: true\n        }\n      };\n      SetCreateRoleForm(updatedControls);\n    } else {\n      const updatedControls = { ...createRoleForm,\n        [controlName]: { ...createRoleForm[controlName],\n          value: event.target.value,\n          valid: checkValidity(event.target.value, createRoleForm[controlName].validation),\n          touched: true\n        }\n      };\n      SetCreateRoleForm(updatedControls);\n    }\n\n    console.log(\"THIS IS STATE VAR\", isPermLod);\n    console.log(\"After submit\", createRoleForm);\n  }; //RENDERING UI ELEMENTS\n\n\n  let form = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 16\n  }, this);\n\n  let perm = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 15\n  }, this);\n\n  if (!props.loading) {\n    console.log(\"props.loading\", props.loading);\n    const formElementsArray = []; //array for input elements\n\n    for (let key in createRoleForm) {\n      // render input elements from array\n      formElementsArray.push({\n        id: key,\n        config: createRoleForm[key]\n      });\n    }\n\n    console.log(\"formElementsArray\", formElementsArray);\n    form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      label: formElement.config.label,\n      className: formElement.config.className,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      options: props.organizations,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this));\n  }\n\n  if (!props.loading) {\n    console.log(\"props.loading\", props.loading);\n    const formElementsArray = []; //array for input elements\n\n    for (let key in permissionForm) {\n      // render input elements from array\n      formElementsArray.push({\n        id: key,\n        config: permissionForm[key]\n      });\n    }\n\n    console.log(\"formElementsArray\", formElementsArray);\n    perm = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      label: formElement.config.label,\n      className: formElement.config.className,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      options: props.AllPermissions,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }, this));\n  } //SUBMIT HANLDER\n\n\n  const CreateRolesubmitHandler = event => {\n    console.log(\"While submitting\", event);\n    console.log(\"form:\", createRoleForm); //console.log(\"permission:\",createRoleForm.permissions_loaded.value)\n\n    let token = localStorage.getItem('token');\n    event.preventDefault();\n    props.onCreateRole(createRoleForm.name.value, createRoleForm.organization.value, createRoleForm.permissions.value, createRoleForm.permissions_loaded.value, token);\n  }; //UI COMPONENTS\n\n\n  let sidebar = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 19\n  }, this);\n\n  let navbar = /*#__PURE__*/_jsxDEV(Navbar, {\n    name: localStorage.getItem('name')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 19\n  }, this);\n\n  let count = 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [navbar, sidebar, /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"CrtRoleForm\",\n      children: [form, perm, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: CreateRolesubmitHandler,\n        children: \"SUBMIT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateRole, \"jbfDqGkhX8TkLhu7ezZlbqZincA=\");\n\n_c = CreateRole;\n\nconst mapAllOrganizationsDispatchToProps = dispatch => {\n  return {\n    onFetchOrganizations: token => dispatch(actions.fetchOrganizations(token)),\n    onFetchAllPermissions: token => dispatch(actions.fetchAllPermissions(token)),\n    onCreateRole: (name, organization, permissions, permissions_loaded, token) => dispatch(actions.createRole(name, organization, permissions, permissions_loaded, token))\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page crtrole', state);\n  return {\n    organizations: state.organizations.organizations,\n    AllPermissions: state.AllPermissions.AllPermissions,\n    loading: state.AllPermissions.loading,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateRole);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRole\");","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateRole/CreateRole.js"],"names":["actions","Redirect","Input","Navbar","Sidebar","React","Component","useState","useEffect","connect","FormData","OneRole","classes","CreateRole","props","newUserArr","token","localStorage","getItem","onFetchOrganizations","onFetchAllPermissions","selectedPermissionsArr","setSelectedPermissionsArr","isPermLod","SetIsPermLod","createRoleForm","SetCreateRoleForm","name","elementType","elementConfig","className","type","placeholder","value","validation","required","valid","touched","organization","label","options","permisson_loaded","permissionForm","setPermissionForm","permissions","checkValidity","rules","isValid","trim","minLength","length","maxLength","isEmail","pattern","test","isNumeric","inputChangedHandler","event","controlName","console","log","updatedControls","includes","parseInt","target","push","form","perm","loading","formElementsArray","key","id","config","map","formElement","organizations","AllPermissions","CreateRolesubmitHandler","preventDefault","onCreateRole","permissions_loaded","sidebar","navbar","count","mapAllOrganizationsDispatchToProps","dispatch","fetchOrganizations","fetchAllPermissions","createRole","mapStatetoProps","state","auth"],"mappings":"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","sourcesContent":["import * as actions from '../../../Store/Actions/Index'; \nimport {Redirect} from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data'; \nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateRole.css';\nconst CreateRole = props =>{\n    let newUserArr=[];\n    //USE EFFECT COMPONENTS\n    useEffect (()=>{\n        let token = localStorage.getItem('token')\n        props.onFetchOrganizations(token);\n        props.onFetchAllPermissions(token);\n    },[]);\n\n    //USE STATE COMPONENTS\n\n    const [selectedPermissionsArr,setSelectedPermissionsArr]=useState([])\n    const [isPermLod,SetIsPermLod]= useState(true);\n    const [createRoleForm,SetCreateRoleForm]= useState({\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                className:'formcontrol',\n                type: 'text',\n                placeholder: 'Role Name'\n            },\n            value: '',\n            validation: {\n                required: true,\n            },\n            valid: false,\n            touched: false\n        },\n        organization: {\n            label:'Organization',\n            elementType: 'dropdown2',\n            elementConfig: {\n                className:'formcontrol',\n                \n            },\n            options:'',\n            value: 0,\n            valid: false,\n            touched: false\n        },\n        permisson_loaded:{\n            label: 'Permission Loaded',\n            elementType: 'check-box',\n            value: isPermLod\n        }\n       })\n    const [permissionForm, setPermissionForm]= useState({\n        permissions: {\n            label:'Permissions',\n            elementType: 'select-multiple2',\n            elementConfig: {\n                className:'formcontrol',\n                options:[]\n            },\n            options:'',\n            value: [],\n            valid: false,\n            touched: false\n        },\n    })\n    //VALIDITY HANDLER\n    const checkValidity=(value, rules) =>{\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    //INPUT HANDLER\n    const inputChangedHandler = (event, controlName) => {\n        console.log('Change Handler',controlName)\n        if(controlName==\"permisson_loaded\"){\n            console.log('ENtere permlod')\n            SetIsPermLod(!isPermLod);\n            const updatedControls = {\n                ...createRoleForm,\n                [controlName]: {\n                    ...createRoleForm[controlName],\n                    value: isPermLod,\n                }\n            };\n            \n            SetCreateRoleForm(updatedControls);\n\n        }\n        else if(controlName==\"permissions\"){\n        console.log('User')\n        if(!selectedPermissionsArr.includes(parseInt(event.target.value))){\n            console.log(\"This is the includes array\",selectedPermissionsArr.includes(parseInt(event.target.value)));\n            setSelectedPermissionsArr([...selectedPermissionsArr,(parseInt(event.target.value)+1)])\n            console.log('full User array',selectedPermissionsArr)\n            newUserArr.push(...selectedPermissionsArr);\n            newUserArr.push((parseInt(event.target.value))+1);\n            console.log('newUSerArr',newUserArr);\n            const updatedControls = {\n            ...createRoleForm,\n            [controlName]: {\n                ...createRoleForm[controlName],\n                value: newUserArr,\n                valid: true,\n                touched: true\n            }  \n        };\n        SetCreateRoleForm(updatedControls);\n        }\n    }else if(controlName==\"organization\"){ \n        \n        const updatedControls = {\n        ...createRoleForm,\n        [controlName]: {\n            ...createRoleForm[controlName],\n            value: ((parseInt(event.target.value))+1),\n            valid: checkValidity(event.target.value, createRoleForm[controlName].validation),\n            touched: true\n        }\n    };\n    SetCreateRoleForm(updatedControls);\n    }else{\n        const updatedControls = {\n            ...createRoleForm,\n            [controlName]: {\n                ...createRoleForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, createRoleForm[controlName].validation),\n                touched: true\n            }\n        };\n        SetCreateRoleForm(updatedControls);\n    }\n    console.log(\"THIS IS STATE VAR\",isPermLod);\n       console.log(\"After submit\",createRoleForm);\n}\n\n\n    //RENDERING UI ELEMENTS\n    let form=  <Sidebar/>;\n    let perm= <Sidebar/>;\n    if(!props.loading){\n        console.log(\"props.loading\",props.loading)\n    const formElementsArray = []; //array for input elements\n        for ( let key in createRoleForm ) {  // render input elements from array\n            formElementsArray.push( {\n                id: key,\n                config: createRoleForm[key]\n            });\n        }\n    console.log(\"formElementsArray\",formElementsArray)\n         form = formElementsArray.map( formElement => (\n            <Input\n                label={formElement.config.label}\n                key={formElement.id}\n                className={formElement.config.className}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                options = {props.organizations}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n        }\n\n        if(!props.loading){\n            console.log(\"props.loading\",props.loading)\n        const formElementsArray = []; //array for input elements\n            for ( let key in permissionForm ) {  // render input elements from array\n                formElementsArray.push( {\n                    id: key,\n                    config: permissionForm[key]\n                });\n            }\n        console.log(\"formElementsArray\",formElementsArray)\n                perm= formElementsArray.map( formElement => (\n                <Input\n                    label={formElement.config.label}\n                    key={formElement.id}\n                    className={formElement.config.className}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    options = {props.AllPermissions}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={( event ) => inputChangedHandler( event, formElement.id )} />\n            ) );\n            }\n    \n    //SUBMIT HANLDER\n    const CreateRolesubmitHandler= (event) => {\n        console.log(\"While submitting\",event);\n        console.log(\"form:\",createRoleForm);\n        //console.log(\"permission:\",createRoleForm.permissions_loaded.value)\n            let token = localStorage.getItem('token')\n            event.preventDefault();\n            props.onCreateRole(createRoleForm.name.value,createRoleForm.organization.value, createRoleForm.permissions.value,createRoleForm.permissions_loaded.value,token);\n        \n    }\n\n    //UI COMPONENTS\n    let sidebar = <Sidebar/>;\n    let navbar =  <Navbar name ={localStorage.getItem('name')}/>;\n    let count = 0;\n   \n    \n    return(\n        <div>\n            {navbar}\n            {sidebar}\n            <form className=\"CrtRoleForm\" >\n                {form}\n                {perm}\n                <button onClick={CreateRolesubmitHandler}>SUBMIT</button>\n            </form>\n    </div>)\n\n    }\n    \n    \n\nconst mapAllOrganizationsDispatchToProps =dispatch => {\n  \n    return{\n        onFetchOrganizations:(token) =>dispatch(actions.fetchOrganizations(token)),\n        onFetchAllPermissions:(token) =>dispatch(actions.fetchAllPermissions(token)),\n        onCreateRole:(name,organization,permissions,permissions_loaded,token)=>dispatch(actions.createRole(name,organization,permissions,permissions_loaded,token))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page crtrole',state)\n    return {\n    organizations: state.organizations.organizations,\n    AllPermissions: state.AllPermissions.AllPermissions,\n    loading:state.AllPermissions.loading,\n    token:state.auth.token\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateRole);\n"]},"metadata":{},"sourceType":"module"}