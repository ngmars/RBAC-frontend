{"ast":null,"code":"//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateRole';\nimport axios from 'axios';\nexport const createRoleSuccess = CreateRole => {\n  return {\n    type: actionTypes.CREATE_ROLES_GET_SUCCESS,\n    CreateRole: CreateRole\n  };\n};\nexport const createRoleFail = error => {\n  return {\n    type: actionTypes.CREATE_ROLES_GET_FAIL,\n    error: error\n  };\n};\nexport const createRoleStart = () => {\n  return {\n    type: actionTypes.CREATE_ROLES_GET_START\n  };\n};\nexport const createRole = (name, organization, permissions, permissions_loaded, token) => {\n  return dispatch => {\n    dispatch(createRoleStart());\n    console.log('GOT DATA');\n    console.log(token);\n    let body = JSON.stringify({\n      \"name\": name,\n      \"organization\": organization,\n      \"permissions\": permissions,\n      \"permisson_loaded\": permisson_loaded\n    });\n    /*\n    let config = {\n      headers: {\n          'Authorization': 'Token ' + token,\n          'content-type':'multipart/form-data;',\n      },\n     \n    }*/\n\n    console.log('SEnt DATA:', body);\n    var config = {\n      method: 'post',\n      url: 'http://127.0.0.1:8000/permissions_roles/router/RoleApi/',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Token ' + token\n      },\n      data: body\n    };\n    axios(config).then(res => {\n      console.log(\"NEWWW RESPONSE\", res.data);\n      /*\n             const fetchedRoles = [];\n             for ( let key in res.data) {\n                 //console.log(res.data.fundraiser[key],key)\n                 fetchedRoles.push( {\n                     ...res.data[key],\n                     id: key\n                 } );\n             }\n         dispatch(createRoleSuccess(fetchedRoles));\n         console.log(\"FETCHED EVENTS\",fetchedRoles); */\n    }).catch(err => {\n      dispatch(createRoleFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Store/Actions/createRole.js"],"names":["actionTypes","axios","createRoleSuccess","CreateRole","type","CREATE_ROLES_GET_SUCCESS","createRoleFail","error","CREATE_ROLES_GET_FAIL","createRoleStart","CREATE_ROLES_GET_START","createRole","name","organization","permissions","permissions_loaded","token","dispatch","console","log","body","JSON","stringify","permisson_loaded","config","method","url","headers","data","then","res","catch","err"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,qCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,iBAAiB,GAAGC,UAAD,IAAe;AAC3C,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAAEK,wBADhB;AAEHF,IAAAA,UAAU,EAAEA;AAFT,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,cAAc,GAAGC,KAAD,IAAU;AACnC,SAAO;AACHH,IAAAA,IAAI,EAAEJ,WAAW,CAAEQ,qBADhB;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAE,MAAI;AAC9B,SAAO;AACHL,IAAAA,IAAI,EAAEJ,WAAW,CAAEU;AADhB,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,UAAU,GAAE,CAACC,IAAD,EAAMC,YAAN,EAAmBC,WAAnB,EAA+BC,kBAA/B,EAAkDC,KAAlD,KAA0D;AAC/E,SAAOC,QAAQ,IAAE;AACbA,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAII,IAAI,GAACC,IAAI,CAACC,SAAL,CAAe;AACpB,cAAQV,IADY;AAEpB,sBAAeC,YAFK;AAGpB,qBAAgBC,WAHI;AAIpB,0BAAmBS;AAJC,KAAf,CAAT;AAKE;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQL,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBC,IAAzB;AACA,QAAII,MAAM,GAAG;AACTC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,GAAG,EAAE,yDAFI;AAGTC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiB,WAASX;AAFnB,OAHA;AAOTY,MAAAA,IAAI,EAAGR;AAPE,KAAb;AASAnB,IAAAA,KAAK,CAACuB,MAAD,CAAL,CACCK,IADD,CACMC,GAAG,IAAE;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BW,GAAG,CAACF,IAAjC;AACA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KAdD,EAeCG,KAfD,CAeOC,GAAG,IAAE;AACRf,MAAAA,QAAQ,CAACX,cAAc,CAAC0B,GAAD,CAAf,CAAR;AACH,KAjBD;AAkBH,GA9CD;AA+CH,CAhDM","sourcesContent":["//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateRole';\nimport axios from 'axios';\nexport const createRoleSuccess =(CreateRole) =>{\n    return {\n        type: actionTypes. CREATE_ROLES_GET_SUCCESS,\n        CreateRole: CreateRole\n    };\n};\n\nexport const createRoleFail =(error) =>{\n    return {\n        type: actionTypes. CREATE_ROLES_GET_FAIL,\n        error:error\n    };\n}\n\nexport const createRoleStart =()=>{\n    return {\n        type: actionTypes. CREATE_ROLES_GET_START\n    };\n}\n\nexport const createRole =(name,organization,permissions,permissions_loaded,token)=>{\n    return dispatch=>{\n        dispatch(createRoleStart());\n        console.log('GOT DATA');\n        console.log(token)\n        let body=JSON.stringify({\n            \"name\": name,\n            \"organization\":organization,\n            \"permissions\" : permissions,\n            \"permisson_loaded\":permisson_loaded\n        })/*\n        let config = {\n            headers: {\n                'Authorization': 'Token ' + token,\n                'content-type':'multipart/form-data;',\n            },\n           \n          }*/\n\n        console.log('SEnt DATA:',body);\n        var config = {\n            method: 'post',\n            url: 'http://127.0.0.1:8000/permissions_roles/router/RoleApi/',\n            headers: { \n              'Content-Type': 'application/json', \n              'Authorization': 'Token '+token\n            },\n            data : body\n          };\n        axios(config)\n        .then(res=>{\n         console.log(\"NEWWW RESPONSE\",res.data)\n         /*\n                const fetchedRoles = [];\n                for ( let key in res.data) {\n                    //console.log(res.data.fundraiser[key],key)\n                    fetchedRoles.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n            dispatch(createRoleSuccess(fetchedRoles));\n            console.log(\"FETCHED EVENTS\",fetchedRoles); */\n        })\n        .catch(err=>{\n            dispatch(createRoleFail(err));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}