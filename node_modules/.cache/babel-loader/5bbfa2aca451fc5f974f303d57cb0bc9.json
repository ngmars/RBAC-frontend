{"ast":null,"code":"//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesAllOrganization';\nimport axios from 'axios';\nexport const fetchOrgRoleSuccess = organizations => {\n  return {\n    type: actionTypes.FETCH_ORGnROLES_SUCCESS,\n    RoleByOrganization: organizations\n  };\n};\nexport const fetchOrgRoleFail = error => {\n  return {\n    type: actionTypes.FETCH_ORGnROLES_FAILED,\n    error: error\n  };\n};\nexport const fetchOrgRoleStart = () => {\n  return {\n    type: actionTypes.FETCH_ORGnROLES_START\n  };\n};\nexport const fetchOrgRole = (organizationId, token) => {\n  return dispatch => {\n    dispatch(fetchOrgRoleStart());\n    console.log('GOT DATA');\n    let config = {\n      headers: {\n        'Authorization': 'Token ' + token\n      }\n    };\n    axios.get('http://localhost:8000/router/getrolebyorg/?org=' + organizationId, config).then(res => {\n      console.log(\"NEWWW RESPONSE\", res.data);\n      const fetchedOrganizations = [];\n      /*\n          for ( let key in res.data) {\n              //console.log(res.data.fundraiser[key],key)\n              fetchedOrganizations.push( {\n                  ...res.data[key],\n                  id: key\n              } );\n          }\n      dispatch(fetchOrganizationsSuccess(fetchedOrganizations));\n      console.log(\"FETCHED EVENTS\",fetchedOrganizations); \n      }*/\n    }).catch(err => {\n      dispatch(fetchOrgRoleFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Store/Actions/allRolesByOrganization.js"],"names":["actionTypes","axios","fetchOrgRoleSuccess","organizations","type","FETCH_ORGnROLES_SUCCESS","RoleByOrganization","fetchOrgRoleFail","error","FETCH_ORGnROLES_FAILED","fetchOrgRoleStart","FETCH_ORGnROLES_START","fetchOrgRole","organizationId","token","dispatch","console","log","config","headers","get","then","res","data","fetchedOrganizations","catch","err"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,0CAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,mBAAmB,GAAGC,aAAD,IAAkB;AAChD,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,uBADf;AAEHC,IAAAA,kBAAkB,EAAEH;AAFjB,GAAP;AAIH,CALM;AAOP,OAAO,MAAMI,gBAAgB,GAAGC,KAAD,IAAU;AACrC,SAAO;AACHJ,IAAAA,IAAI,EAAEJ,WAAW,CAACS,sBADf;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,iBAAiB,GAAE,MAAI;AAChC,SAAO;AACHN,IAAAA,IAAI,EAAEJ,WAAW,CAACW;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAE,CAACC,cAAD,EAAgBC,KAAhB,KAAwB;AAC/C,SAAOC,QAAQ,IAAE;AACbA,IAAAA,QAAQ,CAACL,iBAAiB,EAAlB,CAAR;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AACL,yBAAiB,WAAWL;AADvB;AADA,KAAb;AAKAb,IAAAA,KAAK,CAACmB,GAAN,CAAU,oDAAkDP,cAA5D,EAA2EK,MAA3E,EACCG,IADD,CACMC,GAAG,IAAE;AACVN,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BK,GAAG,CAACC,IAAjC;AACO,YAAMC,oBAAoB,GAAG,EAA7B;AACJ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KAfD,EAgBCC,KAhBD,CAgBOC,GAAG,IAAE;AACRX,MAAAA,QAAQ,CAACR,gBAAgB,CAACmB,GAAD,CAAjB,CAAR;AACH,KAlBD;AAmBH,GA3BD;AA4BH,CA7BM","sourcesContent":["//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesAllOrganization';\nimport axios from 'axios';\nexport const fetchOrgRoleSuccess =(organizations) =>{\n    return {\n        type: actionTypes.FETCH_ORGnROLES_SUCCESS,\n        RoleByOrganization: organizations\n    };\n};\n\nexport const fetchOrgRoleFail =(error) =>{\n    return {\n        type: actionTypes.FETCH_ORGnROLES_FAILED,\n        error:error\n    };\n}\n\nexport const fetchOrgRoleStart =()=>{\n    return {\n        type: actionTypes.FETCH_ORGnROLES_START\n    };\n}\n\nexport const fetchOrgRole =(organizationId,token)=>{\n    return dispatch=>{\n        dispatch(fetchOrgRoleStart());\n        console.log('GOT DATA');\n        let config = {\n            headers: {\n                'Authorization': 'Token ' + token\n            }\n          }\n        axios.get('http://localhost:8000/router/getrolebyorg/?org='+organizationId,config)\n        .then(res=>{\n         console.log(\"NEWWW RESPONSE\",res.data)\n                const fetchedOrganizations = [];\n            /*\n                for ( let key in res.data) {\n                    //console.log(res.data.fundraiser[key],key)\n                    fetchedOrganizations.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n            dispatch(fetchOrganizationsSuccess(fetchedOrganizations));\n            console.log(\"FETCHED EVENTS\",fetchedOrganizations); \n            }*/\n        })\n        .catch(err=>{\n            dispatch(fetchOrgRoleFail(err));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}