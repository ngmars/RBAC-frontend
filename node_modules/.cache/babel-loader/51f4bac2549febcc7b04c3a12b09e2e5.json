{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateOrg/CreateOrg.js\",\n    _s = $RefreshSig$();\n\nimport * as actions from '../../../Store/Actions/Index';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data';\nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateOrg.css';\n\nconst CreateOrgs = props => {\n  _s();\n\n  //Input Element States\n  const [createOrgForm, SetcreateOrgForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Organization Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: false\n      },\n      valid: false,\n      touched: false\n    },\n    Owner: {\n      label: 'Owner',\n      elementType: 'dropdown',\n      elementConfig: {\n        className: 'formcontrol',\n        options: []\n      },\n      value: '',\n      valid: false,\n      touched: false\n    },\n    Users: {\n      label: 'Users',\n      elementType: 'select-multiple',\n      elementConfig: {\n        className: 'formcontrol',\n        options: []\n      },\n      value: '',\n      valid: false,\n      touched: false\n    },\n    permisson_loaded: {\n      label: 'Permission Loaded',\n      elementType: 'check-box',\n      value: false\n    }\n  }); //To load users\n\n  useEffect(() => {\n    let token = localStorage.getItem('token');\n    props.onFetchAllUsers(token);\n    const updatedControls = { ...createOrgForm,\n      Users: { ...createOrgForm[User],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, createOrgForm[controlName].validation),\n        touched: true\n      }\n    };\n  }, []); //To check Validity\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }; //Input Change Handler\n\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...createOrgForm,\n      [controlName]: { ...createOrgForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, createOrgForm[controlName].validation),\n        touched: true\n      }\n    };\n    SetcreateOrgForm(updatedControls);\n  };\n\n  const formElementsArray = []; //array for input elements\n\n  for (let key in createOrgForm) {\n    // render input elements from array\n    formElementsArray.push({\n      id: key,\n      config: createOrgForm[key]\n    });\n  }\n\n  console.log(\"formElementsArray\", formElementsArray);\n  let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n    label: formElement.label,\n    className: formElement.config.className,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id)\n  }, formElement.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 13\n  }, this));\n\n  let sidebar = /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 19\n  }, this);\n\n  let navbar = /*#__PURE__*/_jsxDEV(Navbar, {\n    name: localStorage.getItem('name')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 19\n  }, this);\n\n  let count = 0; //let rolesElement=  <Sidebar/>;\n\n  /*\n  if(!props.loading){\n       rolesElement= props.AllRoles.map(event =>(\n      <div class=\"reposition\">\n      <button name=\"componentButton\" value={event}>\n      <OneRole \n          name={event.name}\n          permission={event.permissions}\n          roleId = {event.id}\n            />\n            {console.log(event.permissions)}\n      </button>\n      </div>\n         ))\n  }*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [navbar, sidebar, /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"fund-pics row\",\n      children: form\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateOrgs, \"yJJ7t6pB+1lFA5WDncPPWAJpjZw=\");\n\n_c = CreateOrgs;\n\nconst mapAllOrganizationsDispatchToProps = dispatch => {\n  return {\n    onFetchAllUsers: token => dispatch(actions.fetchAllUsers(token)) //onFetchOneEvents:(OrganizationId)=>dispatch(actions.fetchOneOrganizations(fundId))\n\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page crtorg', state);\n  return {\n    AllRoles: state.AllRoles.AllRoles,\n    loading: state.organizations.loading,\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateOrgs);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateOrgs\");","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Dashboard/CreateOrg/CreateOrg.js"],"names":["actions","Redirect","Input","Navbar","Sidebar","React","Component","useState","useEffect","connect","FormData","OneRole","classes","CreateOrgs","props","createOrgForm","SetcreateOrgForm","name","elementType","elementConfig","className","type","placeholder","value","validation","required","valid","touched","email","isEmail","Owner","label","options","Users","permisson_loaded","token","localStorage","getItem","onFetchAllUsers","updatedControls","User","event","target","checkValidity","controlName","rules","isValid","trim","minLength","length","maxLength","pattern","test","isNumeric","inputChangedHandler","formElementsArray","key","push","id","config","console","log","form","map","formElement","sidebar","navbar","count","mapAllOrganizationsDispatchToProps","dispatch","fetchAllUsers","mapStatetoProps","state","AllRoles","loading","organizations","auth"],"mappings":"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","sourcesContent":["import * as actions from '../../../Store/Actions/Index'; \nimport {Redirect} from 'react-router-dom';\nimport Input from '../../../Components/UI/Input/input';\nimport Navbar from '../../../Components/Navbar/Navbar';\nimport Sidebar from '../../../Components/Sidebar/Sidebar';\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport FormData from 'form-data'; \nimport OneRole from '../../../Components/OneRole/OneRole';\nimport classes from './CreateOrg.css';\nconst CreateOrgs = props =>{\n    //Input Element States\n\n   const [createOrgForm,SetcreateOrgForm]= useState({\n    name: {\n        elementType: 'input',\n        elementConfig: {\n            className:'formcontrol',\n            type: 'text',\n            placeholder: 'Organization Name'\n        },\n        value: '',\n        validation: {\n            required: true,\n        },\n        valid: false,\n        touched: false\n    },\n    email: {\n        elementType: 'input',\n        elementConfig: {\n            className:'formcontrol',\n            type: 'text',\n            placeholder: 'Username'\n        },\n        value: '',\n        validation: {\n            required: true,\n            isEmail: false\n        },\n        valid: false,\n        touched: false\n    },\n    Owner: {\n        label:'Owner',\n        elementType: 'dropdown',\n        elementConfig: {\n            className:'formcontrol',\n            options:[]\n        },\n        value: '',\n        valid: false,\n        touched: false\n    },\n    Users: {\n        label:'Users',\n        elementType: 'select-multiple',\n        elementConfig: {\n            className:'formcontrol',\n            options:[]\n        },\n        value: '',\n        valid: false,\n        touched: false\n    },\n    permisson_loaded:{\n        label: 'Permission Loaded',\n        elementType: 'check-box',\n        value:false\n    }\n   })\n   //To load users\n    useEffect (()=>{\n        let token = localStorage.getItem('token')\n        props.onFetchAllUsers(token);\n        const updatedControls = {\n            ...createOrgForm,\n            Users: {\n                ...createOrgForm[User],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, createOrgForm[controlName].validation),\n                touched: true\n            }\n        };\n    },[]);\n\n    //To check Validity\n    const checkValidity=(value, rules) =>{\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n    //Input Change Handler\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...createOrgForm,\n            [controlName]: {\n                ...createOrgForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, createOrgForm[controlName].validation),\n                touched: true\n            }\n        };\n        SetcreateOrgForm(updatedControls);\n    }\n    const formElementsArray = []; //array for input elements\n        for ( let key in createOrgForm ) {  // render input elements from array\n            formElementsArray.push( {\n                id: key,\n                config: createOrgForm[key]\n            });\n        }\n    console.log(\"formElementsArray\",formElementsArray)\n        let form = formElementsArray.map( formElement => (\n            <Input\n                label={formElement.label}\n                key={formElement.id}\n                className={formElement.config.className}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n    let sidebar = <Sidebar/>;\n    let navbar =  <Navbar name ={localStorage.getItem('name')}/>;\n    let count = 0;\n    //let rolesElement=  <Sidebar/>;\n    /*\n    if(!props.loading){\n\n        rolesElement= props.AllRoles.map(event =>(\n        <div class=\"reposition\">\n        <button name=\"componentButton\" value={event}>\n        <OneRole \n            name={event.name}\n            permission={event.permissions}\n            roleId = {event.id}\n              />\n              {console.log(event.permissions)}\n        </button>\n        </div>\n           ))\n    }*/\n    return(\n        <div>\n            {navbar}\n            {sidebar}\n            <div class=\"fund-pics row\">\n                {form}\n            </div>\n    </div>)\n\n    }\n    \n    \n\nconst mapAllOrganizationsDispatchToProps =dispatch => {\n  \n    return{\n        onFetchAllUsers:(token) =>dispatch(actions.fetchAllUsers(token)),\n        //onFetchOneEvents:(OrganizationId)=>dispatch(actions.fetchOneOrganizations(fundId))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page crtorg',state)\n    return {\n    AllRoles: state.AllRoles.AllRoles,\n    loading:state.organizations.loading,\n    token:state.auth.token\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapAllOrganizationsDispatchToProps)(CreateOrgs);\n"]},"metadata":{},"sourceType":"module"}