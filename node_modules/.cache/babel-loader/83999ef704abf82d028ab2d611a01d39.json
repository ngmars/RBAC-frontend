{"ast":null,"code":"//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess = CreateOrg => {\n  return {\n    type: actionTypes.CREATE_ORG_SUCCESS,\n    CreateOrg: CreateOrg\n  };\n};\nexport const createOrgFail = error => {\n  return {\n    type: actionTypes.CREATE_ORG_FAIL,\n    error: error\n  };\n};\nexport const createOrgStart = () => {\n  return {\n    type: actionTypes.CREATE_ORG_START\n  };\n};\nexport const createOrg = (name, email, owner, users, permissions_loaded, token) => {\n  return dispatch => {\n    dispatch(createOrgStart());\n    console.log('GOT DATA');\n    console.log(token);\n    let body = {\n      name: name,\n      email: email,\n      logo: null,\n      owner: owner,\n      users: users,\n      permissions_loaded: permissions_loaded\n    };\n    /*\n    let config = {\n       headers: {\n           'Authorization': 'Token ' + token,\n           'content-type':'multipart/form-data;',\n       },\n      \n     }*/\n\n    console.log('SEnt DATA:', body);\n    var config = {\n      method: 'post',\n      url: 'http://127.0.0.1:8000/organization/router/OrganizationApi/',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Token 8a8b34981c36fb2067428e90acfd6a816de7a7bd'\n      },\n      data: body\n    };\n    axios.post('http://127.0.0.1:8000/organization/router/OrganizationApi/', body, config).then(res => {\n      console.log(\"NEWWW RESPONSE\", res.data);\n      /*\n             const fetchedRoles = [];\n             for ( let key in res.data) {\n                 //console.log(res.data.fundraiser[key],key)\n                 fetchedRoles.push( {\n                     ...res.data[key],\n                     id: key\n                 } );\n             }\n         dispatch(createOrgSuccess(fetchedRoles));\n         console.log(\"FETCHED EVENTS\",fetchedRoles); */\n    }).catch(err => {\n      dispatch(createOrgFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Store/Actions/createOrg.js"],"names":["actionTypes","axios","createOrgSuccess","CreateOrg","type","CREATE_ORG_SUCCESS","createOrgFail","error","CREATE_ORG_FAIL","createOrgStart","CREATE_ORG_START","createOrg","name","email","owner","users","permissions_loaded","token","dispatch","console","log","body","logo","config","method","url","headers","data","post","then","res","catch","err"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,oCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gBAAgB,GAAGC,SAAD,IAAc;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,kBADf;AAEHF,IAAAA,SAAS,EAAEA;AAFR,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,aAAa,GAAGC,KAAD,IAAU;AAClC,SAAO;AACHH,IAAAA,IAAI,EAAEJ,WAAW,CAACQ,eADf;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,cAAc,GAAE,MAAI;AAC7B,SAAO;AACHL,IAAAA,IAAI,EAAEJ,WAAW,CAACU;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAE,CAACC,IAAD,EAAMC,KAAN,EAAYC,KAAZ,EAAkBC,KAAlB,EAAwBC,kBAAxB,EAA2CC,KAA3C,KAAmD;AACvE,SAAOC,QAAQ,IAAE;AACbA,IAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAII,IAAI,GAAC;AACLT,MAAAA,IAAI,EAAEA,IADD;AAELC,MAAAA,KAAK,EAACA,KAFD;AAGLS,MAAAA,IAAI,EAAG,IAHF;AAILR,MAAAA,KAAK,EAACA,KAJD;AAKLC,MAAAA,KAAK,EAAEA,KALF;AAMLC,MAAAA,kBAAkB,EAACA;AANd,KAAT;AAOC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBC,IAAzB;AACA,QAAIE,MAAM,GAAG;AACTC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,GAAG,EAAE,4DAFI;AAGTC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAiB;AAFV,OAHA;AAOTC,MAAAA,IAAI,EAAGN;AAPE,KAAb;AASApB,IAAAA,KAAK,CAAC2B,IAAN,CAAW,4DAAX,EAAwEP,IAAxE,EAA6EE,MAA7E,EACCM,IADD,CACMC,GAAG,IAAE;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BU,GAAG,CAACH,IAAjC;AACA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KAdD,EAeCI,KAfD,CAeOC,GAAG,IAAE;AACRd,MAAAA,QAAQ,CAACZ,aAAa,CAAC0B,GAAD,CAAd,CAAR;AACH,KAjBD;AAkBH,GAhDD;AAiDH,CAlDM","sourcesContent":["//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess =(CreateOrg) =>{\n    return {\n        type: actionTypes.CREATE_ORG_SUCCESS,\n        CreateOrg: CreateOrg\n    };\n};\n\nexport const createOrgFail =(error) =>{\n    return {\n        type: actionTypes.CREATE_ORG_FAIL,\n        error:error\n    };\n}\n\nexport const createOrgStart =()=>{\n    return {\n        type: actionTypes.CREATE_ORG_START\n    };\n}\n\nexport const createOrg =(name,email,owner,users,permissions_loaded,token)=>{\n    return dispatch=>{\n        dispatch(createOrgStart());\n        console.log('GOT DATA');\n        console.log(token)\n        let body={\n            name: name,\n            email:email,\n            logo : null,\n            owner:owner,\n            users: users,\n            permissions_loaded:permissions_loaded\n        }/*\n        let config = {\n            headers: {\n                'Authorization': 'Token ' + token,\n                'content-type':'multipart/form-data;',\n            },\n           \n          }*/\n\n        console.log('SEnt DATA:',body);\n        var config = {\n            method: 'post',\n            url: 'http://127.0.0.1:8000/organization/router/OrganizationApi/',\n            headers: { \n              'Content-Type': 'application/json', \n              'Authorization': 'Token 8a8b34981c36fb2067428e90acfd6a816de7a7bd'\n            },\n            data : body\n          };\n        axios.post('http://127.0.0.1:8000/organization/router/OrganizationApi/',body,config)\n        .then(res=>{\n         console.log(\"NEWWW RESPONSE\",res.data)\n         /*\n                const fetchedRoles = [];\n                for ( let key in res.data) {\n                    //console.log(res.data.fundraiser[key],key)\n                    fetchedRoles.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n            dispatch(createOrgSuccess(fetchedRoles));\n            console.log(\"FETCHED EVENTS\",fetchedRoles); */\n        })\n        .catch(err=>{\n            dispatch(createOrgFail(err));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}