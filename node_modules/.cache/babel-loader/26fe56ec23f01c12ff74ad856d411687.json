{"ast":null,"code":"//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess = CreateOrg => {\n  return {\n    type: actionTypes.CREATE_ORG_SUCCESS,\n    CreateOrg: CreateOrg\n  };\n};\nexport const createOrgFail = error => {\n  return {\n    type: actionTypes.CREATE_ORG_FAIL,\n    error: error\n  };\n};\nexport const createOrgStart = () => {\n  return {\n    type: actionTypes.CREATE_ORG_START\n  };\n};\nexport const createOrg = (name, owner, users, permissions_loaded, token) => {\n  return dispatch => {\n    dispatch(createOrgStart());\n    console.log('GOT DATA');\n    let config = {\n      headers: {\n        'Authorization': 'Token ' + token\n      },\n      data: {\n        name: name,\n        logo: null,\n        owner: owner,\n        users: users,\n        permissions_loaded: permissions_loaded\n      }\n    };\n    axios.get('http://localhost:8000/organization/router/createorg/', config).then(res => {\n      console.log(\"NEWWW RESPONSE\", res.data);\n      /*\n             const fetchedRoles = [];\n             for ( let key in res.data) {\n                 //console.log(res.data.fundraiser[key],key)\n                 fetchedRoles.push( {\n                     ...res.data[key],\n                     id: key\n                 } );\n             }\n         dispatch(createOrgSuccess(fetchedRoles));\n         console.log(\"FETCHED EVENTS\",fetchedRoles); */\n    }).catch(err => {\n      dispatch(createOrgFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Store/Actions/createOrg.js"],"names":["actionTypes","axios","createOrgSuccess","CreateOrg","type","CREATE_ORG_SUCCESS","createOrgFail","error","CREATE_ORG_FAIL","createOrgStart","CREATE_ORG_START","createOrg","name","owner","users","permissions_loaded","token","dispatch","console","log","config","headers","data","logo","get","then","res","catch","err"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,oCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gBAAgB,GAAGC,SAAD,IAAc;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,kBADf;AAEHF,IAAAA,SAAS,EAAEA;AAFR,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,aAAa,GAAGC,KAAD,IAAU;AAClC,SAAO;AACHH,IAAAA,IAAI,EAAEJ,WAAW,CAACQ,eADf;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,cAAc,GAAE,MAAI;AAC7B,SAAO;AACHL,IAAAA,IAAI,EAAEJ,WAAW,CAACU;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAE,CAACC,IAAD,EAAMC,KAAN,EAAYC,KAAZ,EAAkBC,kBAAlB,EAAqCC,KAArC,KAA6C;AACjE,SAAOC,QAAQ,IAAE;AACbA,IAAAA,QAAQ,CAACR,cAAc,EAAf,CAAR;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AACL,yBAAiB,WAAWL;AADvB,OADA;AAITM,MAAAA,IAAI,EAAC;AACDV,QAAAA,IAAI,EAAEA,IADL;AAEDW,QAAAA,IAAI,EAAG,IAFN;AAGDV,QAAAA,KAAK,EAACA,KAHL;AAIDC,QAAAA,KAAK,EAAEA,KAJN;AAKDC,QAAAA,kBAAkB,EAACA;AALlB;AAJI,KAAb;AAYAd,IAAAA,KAAK,CAACuB,GAAN,CAAU,sDAAV,EAAiEJ,MAAjE,EACCK,IADD,CACMC,GAAG,IAAE;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BO,GAAG,CAACJ,IAAjC;AACA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KAdD,EAeCK,KAfD,CAeOC,GAAG,IAAE;AACRX,MAAAA,QAAQ,CAACX,aAAa,CAACsB,GAAD,CAAd,CAAR;AACH,KAjBD;AAkBH,GAjCD;AAkCH,CAnCM","sourcesContent":["//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess =(CreateOrg) =>{\n    return {\n        type: actionTypes.CREATE_ORG_SUCCESS,\n        CreateOrg: CreateOrg\n    };\n};\n\nexport const createOrgFail =(error) =>{\n    return {\n        type: actionTypes.CREATE_ORG_FAIL,\n        error:error\n    };\n}\n\nexport const createOrgStart =()=>{\n    return {\n        type: actionTypes.CREATE_ORG_START\n    };\n}\n\nexport const createOrg =(name,owner,users,permissions_loaded,token)=>{\n    return dispatch=>{\n        dispatch(createOrgStart());\n        console.log('GOT DATA');\n        let config = {\n            headers: {\n                'Authorization': 'Token ' + token\n            },\n            data:{\n                name: name,\n                logo : null,\n                owner:owner,\n                users: users,\n                permissions_loaded:permissions_loaded\n            }\n          }\n        axios.get('http://localhost:8000/organization/router/createorg/',config)\n        .then(res=>{\n         console.log(\"NEWWW RESPONSE\",res.data)\n         /*\n                const fetchedRoles = [];\n                for ( let key in res.data) {\n                    //console.log(res.data.fundraiser[key],key)\n                    fetchedRoles.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n            dispatch(createOrgSuccess(fetchedRoles));\n            console.log(\"FETCHED EVENTS\",fetchedRoles); */\n        })\n        .catch(err=>{\n            dispatch(createOrgFail(err));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}