{"ast":null,"code":"//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess = CreateOrg => {\n  return {\n    type: actionTypes.CREATE_ORG_SUCCESS,\n    CreateOrg: CreateOrg\n  };\n};\nexport const createOrgFail = error => {\n  return {\n    type: actionTypes.CREATE_ORG_FAIL,\n    error: error\n  };\n};\nexport const createOrgStart = () => {\n  return {\n    type: actionTypes.CREATE_ORG_START\n  };\n};\nexport const createOrg = (name, email, owner, users, permissions_loaded, token) => {\n  return dispatch => {\n    dispatch(createOrgStart());\n    console.log('GOT DATA');\n    let data = {\n      name: name,\n      email: email,\n      logo: null,\n      owner: owner,\n      users: users,\n      permissions_loaded: permissions_loaded\n    };\n    let config = {\n      headers: {\n        'Authorization': 'Token ' + token\n      }\n    };\n    axios.post('http://127.0.0.1:8000/organization/router/OrganizationApi/', config, data).then(res => {\n      console.log(\"NEWWW RESPONSE\", res.data);\n      /*\n             const fetchedRoles = [];\n             for ( let key in res.data) {\n                 //console.log(res.data.fundraiser[key],key)\n                 fetchedRoles.push( {\n                     ...res.data[key],\n                     id: key\n                 } );\n             }\n         dispatch(createOrgSuccess(fetchedRoles));\n         console.log(\"FETCHED EVENTS\",fetchedRoles); */\n    }).catch(err => {\n      dispatch(createOrgFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Store/Actions/createOrg.js"],"names":["actionTypes","axios","createOrgSuccess","CreateOrg","type","CREATE_ORG_SUCCESS","createOrgFail","error","CREATE_ORG_FAIL","createOrgStart","CREATE_ORG_START","createOrg","name","email","owner","users","permissions_loaded","token","dispatch","console","log","data","logo","config","headers","post","then","res","catch","err"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,oCAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,gBAAgB,GAAGC,SAAD,IAAc;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,kBADf;AAEHF,IAAAA,SAAS,EAAEA;AAFR,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,aAAa,GAAGC,KAAD,IAAU;AAClC,SAAO;AACHH,IAAAA,IAAI,EAAEJ,WAAW,CAACQ,eADf;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,cAAc,GAAE,MAAI;AAC7B,SAAO;AACHL,IAAAA,IAAI,EAAEJ,WAAW,CAACU;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,SAAS,GAAE,CAACC,IAAD,EAAMC,KAAN,EAAYC,KAAZ,EAAkBC,KAAlB,EAAwBC,kBAAxB,EAA2CC,KAA3C,KAAmD;AACvE,SAAOC,QAAQ,IAAE;AACbA,IAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAIC,IAAI,GAAC;AACLT,MAAAA,IAAI,EAAEA,IADD;AAELC,MAAAA,KAAK,EAACA,KAFD;AAGLS,MAAAA,IAAI,EAAG,IAHF;AAILR,MAAAA,KAAK,EAACA,KAJD;AAKLC,MAAAA,KAAK,EAAEA,KALF;AAMLC,MAAAA,kBAAkB,EAACA;AANd,KAAT;AAQA,QAAIO,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AACL,yBAAiB,WAAWP;AADvB;AADA,KAAb;AAMAhB,IAAAA,KAAK,CAACwB,IAAN,CAAW,4DAAX,EAAwEF,MAAxE,EAA+EF,IAA/E,EACCK,IADD,CACMC,GAAG,IAAE;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BO,GAAG,CAACN,IAAjC;AACA;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACS,KAdD,EAeCO,KAfD,CAeOC,GAAG,IAAE;AACRX,MAAAA,QAAQ,CAACZ,aAAa,CAACuB,GAAD,CAAd,CAAR;AACH,KAjBD;AAkBH,GAnCD;AAoCH,CArCM","sourcesContent":["//TO GET ALL ORGANIZATIONS\nimport * as actionTypes from './ActionTypes/actionTypesCreateOrg';\nimport axios from 'axios';\nexport const createOrgSuccess =(CreateOrg) =>{\n    return {\n        type: actionTypes.CREATE_ORG_SUCCESS,\n        CreateOrg: CreateOrg\n    };\n};\n\nexport const createOrgFail =(error) =>{\n    return {\n        type: actionTypes.CREATE_ORG_FAIL,\n        error:error\n    };\n}\n\nexport const createOrgStart =()=>{\n    return {\n        type: actionTypes.CREATE_ORG_START\n    };\n}\n\nexport const createOrg =(name,email,owner,users,permissions_loaded,token)=>{\n    return dispatch=>{\n        dispatch(createOrgStart());\n        console.log('GOT DATA');\n        let data={\n            name: name,\n            email:email,\n            logo : null,\n            owner:owner,\n            users: users,\n            permissions_loaded:permissions_loaded\n        }\n        let config = {\n            headers: {\n                'Authorization': 'Token ' + token\n            }\n            \n          }\n        axios.post('http://127.0.0.1:8000/organization/router/OrganizationApi/',config,data)\n        .then(res=>{\n         console.log(\"NEWWW RESPONSE\",res.data)\n         /*\n                const fetchedRoles = [];\n                for ( let key in res.data) {\n                    //console.log(res.data.fundraiser[key],key)\n                    fetchedRoles.push( {\n                        ...res.data[key],\n                        id: key\n                    } );\n                }\n            dispatch(createOrgSuccess(fetchedRoles));\n            console.log(\"FETCHED EVENTS\",fetchedRoles); */\n        })\n        .catch(err=>{\n            dispatch(createOrgFail(err));\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}