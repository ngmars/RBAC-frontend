{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nitish/Documents/GitHub/RBAC/React-app/rbac-front/src/Containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../Components/UI/Input/input';\nimport Button from '../../Components/UI/Button/button';\nimport { Redirect } from 'react-router-dom';\nimport * as actions from '../../Store/Actions/Index';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //Configure input fields for sign-in form\n      controls_signIn: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      //Configure input fields for sign-up form\n      controls_signUp: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'text',\n            placeholder: 'Name'\n          },\n          value: '',\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        Confpassword: {\n          elementType: 'input',\n          elementConfig: {\n            className: 'formcontrol',\n            type: 'password',\n            placeholder: 'Password(repeat)'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 8\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignIn: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      if (this.state.isSignIn) {\n        const updatedControls = { ...this.state.controls_signIn,\n          [controlName]: { ...this.state.controls_signIn[controlName],\n            value: event.target.value,\n            valid: this.checkValidity(event.target.value, this.state.controls_signIn[controlName].validation),\n            touched: true\n          }\n        };\n        this.setState({\n          controls_signIn: updatedControls\n        });\n      } else {\n        const updatedControls = { ...this.state.controls_signUp,\n          [controlName]: { ...this.state.controls_signUp[controlName],\n            value: event.target.value,\n            valid: this.checkValidity(event.target.value, this.state.controls_signUp[controlName].validation),\n            touched: true\n          }\n        };\n        this.setState({\n          controls_signUp: updatedControls\n        });\n      }\n    };\n\n    this.submitHandler = event => {\n      if (this.state.isSignIn) {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls_signIn.email.value, this.state.controls_signIn.password.value);\n      } else {\n        event.preventDefault();\n        this.props.onSignUp(this.state.controls_signUp.email.value, this.state.controls_signUp.name.value, this.state.controls_signUp.password.value);\n      }\n    };\n\n    this.switchAuthHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignIn: !prevState.isSignIn\n        };\n      });\n    };\n  }\n\n  //Validates all inputs\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  } //Checks if an input has been entered in the text box\n\n\n  render() {\n    const formElementsArray = []; //array for input elements\n\n    if (this.state.isSignIn) {\n      for (let key in this.state.controls_signIn) {\n        // render input elements from array\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls_signIn[key]\n        });\n      }\n    } else {\n      for (let key in this.state.controls_signUp) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls_signUp[key]\n        });\n      }\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 27\n      }, this);\n    } //mapping configurations of input elements \n\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      className: formElement.config.className,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)); //configuring loading...\n    //configuring success message for signup state onlue\n\n    let successMessage;\n\n    if (!this.state.isSignIn) {\n      if (this.props.success_signup) {\n        successMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"SignUp-success\",\n          children: this.props.success_signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this);\n      }\n    } //configuring error message based on if sigin or signup is the state\n\n\n    let errorMessage = null;\n\n    if (this.state.isSignIn) {\n      if (this.props.error_auth) {\n        console.log(\"in main page\", this.props.error_auth);\n        errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"SignIn-error\",\n          children: this.props.error_auth.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      if (this.props.error_signup) {\n        console.log(\"in main page\", this.props.error_signup);\n        errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"SignIn-error\",\n          children: this.props.error_signup.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 20\n        }, this);\n      }\n    } //configuring submit button based on if sigin or signup is the state\n\n\n    let button = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"SignIn-button\",\n      children: this.state.isSignIn ? 'Log In' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this); //returning HTML jsx \n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logindark\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"signin-form\",\n        onSubmit: this.submitHandler,\n        children: [form, button, successMessage, errorMessage, /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"forgot\",\n          children: \"Forgot your password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.switchAuthHandler,\n          className: \"forgot-btn \",\n          children: this.state.isSignIn ? 'New user?Click here to sign up' : 'Already have an account? Click Here'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), authRedirect]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this);\n  }\n\n} //To access the props sent \n\n\nconst mapSignInDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n    onSignUp: (email, name, password, confpassword) => dispatch(actions.SignUp(email, name, password, confpassword))\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page', state);\n  return {\n    //error_auth:  state.auth.error,\n    //error_signup:state.signup.error, \n    success_signup: state.signup.success,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nexport default connect(mapStatetoProps, mapSignInDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/nitish/Documents/GitHub/RBAC/React-app/rbac-front/src/Containers/Auth/Auth.js"],"names":["React","Component","connect","Input","Button","Redirect","actions","Auth","state","controls_signIn","email","elementType","elementConfig","className","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","controls_signUp","name","Confpassword","isSignIn","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","onSignUp","switchAuthHandler","prevState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","authRedirect","isAuthenticated","form","map","formElement","successMessage","success_signup","errorMessage","error_auth","console","log","message","error_signup","button","mapSignInDispatchToProps","dispatch","auth","confpassword","SignUp","mapStatetoProps","signup","success","token"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from '../../Components/UI/Input/input';\nimport Button from '../../Components/UI/Button/button';\n\nimport {Redirect} from 'react-router-dom';\n\nimport * as actions from '../../Store/Actions/Index';\n\nclass Auth extends Component {\n    //Setting States\n    state = {\n        //Configure input fields for sign-in form\n        controls_signIn: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            }\n        },\n\n        //Configure input fields for sign-up form\n        controls_signUp: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            name:{\n                elementType:'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'text',\n                    placeholder: 'Name'\n                },\n                value: '',\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            },\n            Confpassword: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password(repeat)'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            }\n        },\n        isSignIn:true,\n   \n    }\n    //Validates all inputs\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n    //Checks if an input has been entered in the text box\n    inputChangedHandler = (event, controlName) => {\n        \n        if(this.state.isSignIn){\n            const updatedControls = {\n                ...this.state.controls_signIn,\n                [controlName]: {\n                    ...this.state.controls_signIn[controlName],\n                    value: event.target.value,\n                    valid: this.checkValidity(event.target.value, this.state.controls_signIn[controlName].validation),\n                    touched: true\n                }\n            };\n        this.setState({controls_signIn: updatedControls});\n        }else{\n            const updatedControls = {\n                ...this.state.controls_signUp,\n                [controlName]: {\n                    ...this.state.controls_signUp[controlName],\n                    value: event.target.value,\n                    valid: this.checkValidity(event.target.value, this.state.controls_signUp[controlName].validation),\n                    touched: true\n                }\n            };\n            this.setState({controls_signUp: updatedControls});\n\n        }\n    }\n    //saves the input in the state and passes it on as props\n    submitHandler = (event) => {\n        if(this.state.isSignIn){\n            event.preventDefault();\n            this.props.onAuth(this.state.controls_signIn.email.value, this.state.controls_signIn.password.value);\n        }\n        else{\n            event.preventDefault();\n            this.props.onSignUp(this.state.controls_signUp.email.value, this.state.controls_signUp.name.value, this.state.controls_signUp.password.value);\n        }\n    }\n\n    //switch between sigin and signup(To add forgot password)\n    switchAuthHandler =()=>{\n        this.setState(prevState=>{\n                return {isSignIn: !prevState.isSignIn}\n        })\n    };\n   \n\n\n    render () {\n        \n        const formElementsArray = []; //array for input elements\n        if(this.state.isSignIn){\n        for ( let key in this.state.controls_signIn ) {  // render input elements from array\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls_signIn[key]\n            });\n        }\n        }else{\n\n            for ( let key in this.state.controls_signUp ) {\n                formElementsArray.push( {\n                    id: key,\n                    config: this.state.controls_signUp[key]\n                } );\n            }\n        }\n        let authRedirect = null;\n        if (this.props.isAuthenticated){\n            authRedirect =<Redirect to ='/events'/>\n        }\n        //mapping configurations of input elements \n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                className={formElement.config.className}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        //configuring loading...\n        \n\n        //configuring success message for signup state onlue\n        let successMessage;\n        if(!this.state.isSignIn){\n            if(this.props.success_signup){\n                successMessage=(\n                <p className=\"SignUp-success\">{this.props.success_signup}</p>\n            )\n        }\n    }\n\n        //configuring error message based on if sigin or signup is the state\n        let errorMessage = null;\n        if(this.state.isSignIn){\n            if(this.props.error_auth){\n             console.log(\"in main page\",this.props.error_auth)\n                errorMessage=(\n                <p className=\"SignIn-error\">{this.props.error_auth.message}</p>\n                );\n         }\n        }else{\n            if(this.props.error_signup){\n                console.log(\"in main page\",this.props.error_signup)\n                   errorMessage=(\n                   <p className=\"SignIn-error\">{this.props.error_signup.message}</p>\n                   );\n         }\n        }\n\n\n        //configuring submit button based on if sigin or signup is the state\n       let button=  (\n            <button className='SignIn-button'>{this.state.isSignIn ? 'Log In': 'Sign Up'}</button>\n        );\n        \n        //returning HTML jsx \n        return (\n            <div className=\"logindark\">\n                <form className=\"signin-form\" onSubmit={this.submitHandler}>\n                \n                    {form}\n                    {button}\n              \n                    {successMessage}\n                    {errorMessage}\n                    <a className=\"forgot\" >Forgot your password?</a>\n                     <button \n                     onClick={this.switchAuthHandler}\n                     className=\"forgot-btn \">{this.state.isSignIn ? 'New user?Click here to sign up': 'Already have an account? Click Here'}</button>\n                </form>\n                {authRedirect}\n            </div>\n        );\n        \n        }\n\n    \n}\n    \n\n//To access the props sent \nconst mapSignInDispatchToProps =dispatch => {\n  \n    return{\n        \n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\n        onSignUp:(email,name,password,confpassword)=>dispatch(actions.SignUp(email,name,password,confpassword))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page',state)\n    return {\n       \n        //error_auth:  state.auth.error,\n        //error_signup:state.signup.error, \n        success_signup: state.signup.success,\n        isAuthenticated: state.auth.token !==null\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapSignInDispatchToProps)(Auth);\n\n"]},"metadata":{},"sourceType":"module"}