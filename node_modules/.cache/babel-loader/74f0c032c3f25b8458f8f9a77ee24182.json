{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Auth/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../Components/UI/Input/input';\nimport { Redirect } from 'react-router-dom';\nimport classes from './Auth.css';\nimport * as actions from '../../Store/Actions/Index';\n\nconst Auth = props => {\n  _s();\n\n  //Configure input fields for sign-in form\n  const [signInForm, setSignInForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Username'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: false\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 8\n      },\n      valid: false,\n      touched: false\n    }\n  }); //Configure input fields for sign-up form\n\n  const [signUpForm, setSignUpForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'email',\n        placeholder: 'Email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'text',\n        placeholder: 'Name'\n      },\n      value: '',\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 8\n      },\n      valid: false,\n      touched: false\n    },\n    Confpassword: {\n      elementType: 'input',\n      elementConfig: {\n        className: 'formcontrol',\n        type: 'password',\n        placeholder: 'Password(repeat)'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 8\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignIn, setIsSignIn] = useState(true); //Validates all inputs\n\n  const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }; //Checks if an input has been entered in the text box\n\n\n  const inputChangedHandler = (event, controlName) => {\n    if (isSignIn) {\n      const updatedControls = { ...signInForm,\n        [controlName]: { ...signInForm[controlName],\n          value: event.target.value,\n          valid: checkValidity(event.target.value, signInForm[controlName].validation),\n          touched: true\n        }\n      };\n      setSignInForm(updatedControls);\n    } else {\n      const updatedControls = { ...signUpForm,\n        [controlName]: { ...signUpForm[controlName],\n          value: event.target.value,\n          valid: checkValidity(event.target.value, signUpForm[controlName].validation),\n          touched: true\n        }\n      };\n      setSignUpForm(updatedControls);\n    }\n  }; //saves the input in the state and passes it on as props\n\n\n  const submitHandler = event => {\n    if (isSignIn) {\n      event.preventDefault();\n      props.onAuth(signInForm.email.value, signInForm.password.value);\n    } else {\n      event.preventDefault();\n      props.onSignUp(signUpForm.email.value, signUpForm.name.value, signUpForm.password.value);\n    }\n  }; //switch between sigin and signup(To add forgot password)\n\n\n  const switchAuthHandler = () => {\n    setIsSignIn(!isSignIn);\n  };\n\n  const formElementsArray = []; //array for input elements\n\n  if (isSignIn) {\n    for (let key in signInForm) {\n      // render input elements from array\n      formElementsArray.push({\n        id: key,\n        config: signInForm[key]\n      });\n    }\n  } else {\n    for (let key in signUpForm) {\n      formElementsArray.push({\n        id: key,\n        config: signUpForm[key]\n      });\n    }\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/vworg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 27\n    }, this);\n  } //mapping configurations of input elements \n\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n    lable: formElement.label,\n    className: formElement.config.className,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id)\n  }, formElement.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 13\n  }, this)); //configuring loading...\n  //configuring success message for signup state onlue\n\n  let successMessage;\n\n  if (!isSignIn) {\n    if (props.success_signup) {\n      successMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"SignUp-success\",\n        children: props.success_signup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this);\n    }\n  } //configuring error message based on if sigin or signup is the state\n\n\n  let errorMessage = null;\n\n  if (isSignIn) {\n    if (props.error_auth) {\n      console.log(\"in main page\", props.error_auth);\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"SignIn-error\",\n        children: props.error_auth.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this);\n    }\n  } else {\n    if (props.error_signup) {\n      console.log(\"in main page\", props.error_signup);\n      errorMessage = /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"SignIn-error\",\n        children: props.error_signup.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 20\n      }, this);\n    }\n  } //configuring submit button based on if sigin or signup is the state\n\n\n  let button = /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"SignIn-button\",\n    children: isSignIn ? 'Log In' : 'Sign Up'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 13\n  }, this); //returning HTML jsx \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logindark\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"signin-form\",\n      onSubmit: submitHandler,\n      children: [form, button, successMessage, errorMessage, /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"forgot\",\n        children: \"Forgot your password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchAuthHandler,\n        className: \"forgot-btn \",\n        children: isSignIn ? 'New user?Click here to sign up' : 'Already have an account? Click Here'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }, this), authRedirect]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 13\n  }, this);\n}; //To access the props sent \n\n\n_s(Auth, \"4M5KyMCqnWopT+A72tIE3gE43pY=\");\n\n_c = Auth;\n\nconst mapSignInDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password)),\n    onSignUp: (email, name, password, confpassword) => dispatch(actions.SignUp(email, name, password, confpassword))\n  };\n}; //to access the errors and loading state \n\n\nconst mapStatetoProps = state => {\n  console.log('main page', state);\n  return {\n    error_auth: state.auth.error,\n    loading_signup: state.signup.loading,\n    error_signup: state.signup.error,\n    success_signup: state.signup.success,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nexport default connect(mapStatetoProps, mapSignInDispatchToProps)(Auth);\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/nitish/Desktop/rbac/React-app/rbac-front/src/Containers/Auth/Auth.js"],"names":["React","useState","useEffect","connect","Input","Redirect","classes","actions","Auth","props","signInForm","setSignInForm","email","elementType","elementConfig","className","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","signUpForm","setSignUpForm","name","Confpassword","isSignIn","setIsSignIn","checkValidity","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","onSignUp","switchAuthHandler","formElementsArray","key","push","id","config","authRedirect","isAuthenticated","form","map","formElement","label","successMessage","success_signup","errorMessage","error_auth","console","log","message","error_signup","button","mapSignInDispatchToProps","dispatch","auth","confpassword","SignUp","mapStatetoProps","state","error","loading_signup","signup","loading","success","token"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Input from '../../Components/UI/Input/input';\nimport {Redirect} from 'react-router-dom';\nimport classes from './Auth.css';\nimport * as actions from '../../Store/Actions/Index';\nconst Auth = props => {\n    \n        //Configure input fields for sign-in form\n        const[signInForm, setSignInForm] =  useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'text',\n                    placeholder: 'Username'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: false\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            }\n        });\n        //Configure input fields for sign-up form\n        const[signUpForm, setSignUpForm] =  useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'email',\n                    placeholder: 'Email'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            name:{\n                elementType:'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'text',\n                    placeholder: 'Name'\n                },\n                value: '',\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            },\n            Confpassword: {\n                elementType: 'input',\n                elementConfig: {\n                    className:'formcontrol',\n                    type: 'password',\n                    placeholder: 'Password(repeat)'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8\n                },\n                valid: false,\n                touched: false\n            \n            }\n        });\n        const [isSignIn, setIsSignIn]= useState(true);\n   \n    \n    //Validates all inputs\n    const checkValidity=(value, rules) =>{\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n    //Checks if an input has been entered in the text box\n    const inputChangedHandler = (event, controlName) => {\n        \n        if(isSignIn){\n            const updatedControls = {\n                ...signInForm,\n                [controlName]: {\n                    ...signInForm[controlName],\n                    value: event.target.value,\n                    valid: checkValidity(event.target.value, signInForm[controlName].validation),\n                    touched: true\n                }\n            };\n            setSignInForm(updatedControls);\n        }else{\n            const updatedControls = {\n                ...signUpForm,\n                [controlName]: {\n                    ...signUpForm[controlName],\n                    value: event.target.value,\n                    valid: checkValidity(event.target.value, signUpForm[controlName].validation),\n                    touched: true\n                }\n            };\n            setSignUpForm(updatedControls);\n\n        }\n    }\n    //saves the input in the state and passes it on as props\n    const submitHandler = (event) => {\n        if(isSignIn){\n            event.preventDefault();\n            props.onAuth(signInForm.email.value, signInForm.password.value);\n        }\n        else{\n            event.preventDefault();\n            props.onSignUp(signUpForm.email.value, signUpForm.name.value, signUpForm.password.value);\n        }\n    }\n\n    //switch between sigin and signup(To add forgot password)\n    const switchAuthHandler =()=>{\n        setIsSignIn(!isSignIn);\n    };\n   \n\n\n\n        \n        const formElementsArray = []; //array for input elements\n        if(isSignIn){\n        for ( let key in signInForm ) {  // render input elements from array\n            formElementsArray.push( {\n                id: key,\n                config: signInForm[key]\n            });\n        }\n        }else{\n\n            for ( let key in signUpForm ) {\n                formElementsArray.push( {\n                    id: key,\n                    config: signUpForm[key]\n                } );\n            }\n        }\n        let authRedirect = null;\n        if (props.isAuthenticated){\n            authRedirect =<Redirect to ='/vworg'/>\n        }\n        //mapping configurations of input elements \n        let form = formElementsArray.map( formElement => (\n            <Input\n                lable ={formElement.label}\n                key={formElement.id}\n                className={formElement.config.className}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        //configuring loading...\n        \n\n        //configuring success message for signup state onlue\n        let successMessage;\n        if(!isSignIn){\n            if(props.success_signup){\n                successMessage=(\n                <p className=\"SignUp-success\">{props.success_signup}</p>\n            )\n        }\n    }\n\n        //configuring error message based on if sigin or signup is the state\n        let errorMessage = null;\n        if(isSignIn){\n            if(props.error_auth){\n             console.log(\"in main page\",props.error_auth)\n                errorMessage=(\n                <p className=\"SignIn-error\">{props.error_auth.message}</p>\n                );\n         }\n        }else{\n            if(props.error_signup){\n                console.log(\"in main page\",props.error_signup)\n                   errorMessage=(\n                   <p className=\"SignIn-error\">{props.error_signup.message}</p>\n                   );\n         }\n        }\n\n\n        //configuring submit button based on if sigin or signup is the state\n       let button=  (\n            <button className='SignIn-button'>{isSignIn ? 'Log In': 'Sign Up'}</button>\n        );\n        \n        //returning HTML jsx \n        return (\n            <div className=\"logindark\">\n                <form className=\"signin-form\" onSubmit={submitHandler}>\n                \n                    {form}\n                    {button}\n              \n                    {successMessage}\n                    {errorMessage}\n                    <a className=\"forgot\" >Forgot your password?</a>\n                     <button \n                     onClick={switchAuthHandler}\n                     className=\"forgot-btn \">{isSignIn ? 'New user?Click here to sign up': 'Already have an account? Click Here'}</button>\n                </form>\n                {authRedirect}\n            </div>\n        );\n        \n        \n\n    \n}\n    \n\n//To access the props sent \nconst mapSignInDispatchToProps =dispatch => {\n  \n    return{\n        \n        onAuth: (email, password) => dispatch(actions.auth(email, password)),\n        onSignUp:(email,name,password,confpassword)=>dispatch(actions.SignUp(email,name,password,confpassword))\n    };\n}\n\n\n//to access the errors and loading state \nconst mapStatetoProps = state =>{\n    console.log('main page',state)\n    return {\n        error_auth:  state.auth.error,\n        loading_signup: state.signup.loading,\n        error_signup:state.signup.error, \n        success_signup: state.signup.success,\n        isAuthenticated: state.auth.token !==null\n    };\n};\n\n\nexport default connect(mapStatetoProps, mapSignInDispatchToProps)(Auth);\n\n"]},"metadata":{},"sourceType":"module"}